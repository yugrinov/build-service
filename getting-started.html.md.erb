---
title: Getting Started with Tanzu Build Service
owner: Build Service Team
---

This topic describes how to get started with a typical installation of Tanzu Build Service and create an Image.

This page is meant to serve as a quick-start guide and may not include some configurations required for your specific environment. For more details on installation, see [Installing Tanzu Build Service](installing.html).

## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must:

* Have access to the Kubernetes cluster satisfying the [minimum required permissions](#install-rbac).

* Ensure your Kubernetes cluster is configured with default `StorageClass`.
Tanzu Build Service will default to using 2G of cache if a default `StorageClass` is defined.
Build Service utilizes `PersistentVolumeClaims` to cache build artifacts, which reduces the time of subsequent builds.

    For more information, see [Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) in the Kubernetes documentation. And for information on defining a default StorageClass, see [Changing the default StorageClass](https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/)

* Download three [Carvel](https://carvel.dev/) CLIs for your operating system. These tools will facilitate the installation of Tanzu Build Service on your cluster. They can be found on their respective Tanzu Network pages:
  - [kapp](https://network.pivotal.io/products/kapp/) is a deployment tool that allows users to manage Kubernetes resources in bulk.
  - [ytt](https://network.pivotal.io/products/ytt/) is a templating tool that understands YAML structure.
  - [kbld](https://network.pivotal.io/products/kbld/) is tool that builds, pushes, and relocates container images.

* Download the Build Service Bundle from the [Tanzu Build Service](https://network.pivotal.io/products/build-service/) page on Tanzu Network.
  * Unarchive the Build Service Bundle file:

	```
	tar xvf build-service-<version>.tar -C /tmp
	```

* Download the `kp` CLI for your operating system from the [Tanzu Build Service](https://network.pivotal.io/products/build-service/) page on Tanzu Network. The `kp` CLI help text is published [here](https://github.com/vmware-tanzu/kpack-cli/blob/v0.2.0/docs/kp.md).
	* These docs assume kp cli v0.2.* from TBS release v1.1.*. If a feature is not working, you may need to upgrade your cli.

* Download the `docker` cli to authenticate with registries.

* Download the Dependency Descriptor file (`descriptor-<version>.yaml`) from the latest release on the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page on Tanzu Network. This file contains paths to images that contain dependency resources Tanzu Build Service needs to execute image builds.

## <a id='Assumptions'></a> Assumptions

For this example setup, we will make the following assumptions:

* You are using a registry named `my.registry.io` with credentials
  * Username: `my-user`
  * Password: `my-password`
* Your registry uses a self-signed CA certificate and you have access to the cert in a file `/tmp/ca.crt`
  * The nodes on your cluster must also be configured to trust this CA certificate so they can pull in images. Configuration for this depends on the cluster provider
* You are using an "online" environment that has access to the internet

## <a id='installation'></a> Installation

### <a id='relocate-images'></a> Relocate Images to a Registry

This procedure relocates images from the Tanzu Network registry to your registry.

1. Log in to your image registry:

```
docker login my.registry.io --tlscacert /tmp/ca.crt
```

2. Log in to the Tanzu Network registry with your Tanzu Network credentials:

```
docker login registry.pivotal.io
```

3. Relocate the images with the [Carvel](https://carvel.dev/) tool `kbld` by running:

```
kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository my.registry.io/tbs --registry-ca-cert-path /tmp/ca.crt
```

<p class="note"><strong>Note:</strong> The flag argument <code>--lock-output /tmp/images-relocated.lock</code> creates a file that will be used for installation</code>.</p>

### <a id='install'></a> Install Tanzu Build Service

Use the [Carvel](https://carvel.dev/) tools `kapp`, `ytt`, and `kbld` to install Build Service and define the required Build Service parameters by running:

```
ytt -f /tmp/values.yaml \
    -f /tmp/manifests/ \
    -f /tmp/ca.crt \
	-v docker_repository="my.registry.io/tbs" \
	-v docker_username="my-user" \
	-v docker_password="my-password" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

### <a id='import'></a> Import Tanzu Build Service Dependencies

The Tanzu Build Service Dependencies (Stacks, Buildpacks, Builders, etc.) are used to build applications and keep them patched.

These must be imported with the `kp` cli and the Dependency Descriptor (`descriptor-<version>.yaml`) file from the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page:

```
kp import -f /tmp/descriptor-<version>.yaml --registry-ca-cert-path /tmp/ca.crt
```

Successfully performing a `kp import` command requires that your Tanzu Network account has access to the images specified in the Dependency Descriptor file.
Users can only access these images if they agree to the dependency EULAs.

Users must navigate to the following dependencies pages in Tanzu Network and accept all EULAs highlighted in yellow.

1. [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/)
1. [Buildpacks for VMware Tanzu](https://network.pivotal.io/products/tanzu-buildpacks-suite)
1. [Stacks for VMware Tanzu](https://network.pivotal.io/products/tanzu-stacks-suite)

<p class="note"><strong>Note:</strong> `kp import` will fail if it cannot access the images in all of the above Tanzu Network pages.</p>

## <a id='verify-installation'></a> Verify Installation

To verify your Build Service installation:

List the cluster builders available in your installation:

```
kp clusterbuilder list
```

You should see an output that looks as follows:

```
NAME       READY    STACK                          IMAGE
base       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
default    true     io.buildpacks.stacks.bionic    <image@sha256:digest>
full       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
tiny       true     io.paketo.stacks.tiny          <image@sha256:digest>
```

## <a id='create-image'></a> Create an Image

You can now create a Tanzu Build Service Image to start building you app and keep it patched with the latest Stack and Buildpack Dependencies.

We will assume you are using the `default` namespace, use `-n` when using `kp` to set a specific namespace.

1. Create a Kubernetes Secret that will allow your Builds to push to the desired registry with the `kp` cli:

```
kp secret create my-registry-creds --registry my.registry.io --registry-user my-user
```

You will be prompted for your password (`my-password`).

2. Create the Tanzu Build Service Image:

We will use a [sample java-maven app](https://github.com/buildpacks/samples/tree/098946cf3d9ce2d6b42d6b33a12b0799b288f873/apps/java-maven):

```
kp image create my-image --tag my.registry.io/tbs/test-app --git https://github.com/buildpacks/samples --sub-path ./apps/java-maven --wait
```
